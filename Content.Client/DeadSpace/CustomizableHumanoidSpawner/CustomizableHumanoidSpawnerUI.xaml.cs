// Мёртвый Космос, Licensed under custom terms with restrictions on public hosting and commercial use, full text: https://raw.githubusercontent.com/dead-space-server/space-station-14-fobos/master/LICENSE.TXT

using Content.Client.UserInterface.Controls;
using Content.Shared.DeadSpace.CustomizableHumanoidSpawner;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Utility;
using System.Threading;
using Timer = Robust.Shared.Timing.Timer;
using Content.Shared.Preferences;
using Robust.Shared.Prototypes;

namespace Content.Client.DeadSpace.CustomizableHumanoidSpawner;

[GenerateTypedNameReferences]
public sealed partial class CustomizableHumanoidSpawnerUI : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public event Action<bool, int, string, bool, string>? OnConfirm;

    private readonly List<CustomizableHumanoidSpawnerCharacterInfo> _characters = new();
    private readonly CancellationTokenSource _timerCancel = new();
    private bool _timerStarted;
    private int _timeLeft;

    private bool _canChangeNameAndDescription = true;
    private bool _completed;

    public CustomizableHumanoidSpawnerUI()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        UseSelectedCharacter.OnPressed += _ =>
        {
            Send(false);
            _completed = true;
            Close();
        };

        UseRandomCharacter.OnPressed += _ =>
        {
            Send(true);
            _completed = true;
            Close();
        };

        CustomNameCheck.OnToggled += args =>
        {
            CustomNameInput.Editable = args.Pressed;
            CustomNameRandom.Disabled = !args.Pressed;
            if (!args.Pressed)
                CustomNameInput.Text = _characters[CharacterSelector.SelectedId].Name;
        };

        CustomNameRandom.OnPressed += _ =>
        {
            var info = _characters[CharacterSelector.SelectedId];
            CustomNameInput.Text = HumanoidCharacterProfile.GetName(info.Species, info.Gender);
        };

        CustomDescriptionCheck.OnToggled += args =>
        {
            CustomDescriptionInput.Editable = args.Pressed;
            if (!args.Pressed)
                CustomDescriptionInput.TextRope = new Rope.Leaf(_characters[CharacterSelector.SelectedId].Description);
        };

        CharacterSelector.OnItemSelected += SelectCharacter;
        OnClose += RunOnClose;
    }

    public void SetData(CustomizableHumanoidSpawnerBuiState state)
    {
        _characters.Clear();
        _characters.AddRange(state.Characters);
        CharacterSelector.Clear();

        for (var i = 0; i < _characters.Count; i++)
        {
            CharacterSelector.AddItem(_characters[i].Name, i);
        }

        CharacterSelector.SelectId(0);
        UpdateFields(0);

        if (!state.CanChangeNameAndDescription)
        {
            CustomNameCheck.Disabled = true;
            CustomNameRandom.Orphan();
            CustomDescriptionCheck.Disabled = true;

            CustomNameCheck.Text = Loc.GetString("customizable-humanoid-spawner-name-forbidden");
            CustomDescriptionCheck.Text = Loc.GetString("customizable-humanoid-spawner-description-forbidden");
            _canChangeNameAndDescription = false;
        }

        if (state.RandomizedName != null)
            CustomNameInput.Text = state.RandomizedName;

        if (state.AllowedSpecies.Count > 10)
        {
            List<string> speciesList = [];
            foreach (var species in state.AllowedSpecies)
            {
                if (_prototypeManager.TryIndex(species, out var specie))
                    speciesList.Add(Loc.GetString(specie.Name));
            }

            AllowedSpeciesDescription.Text =
                Loc.GetString("customizable-humanoid-spawner-species-list") + " " + string.Join(", ", speciesList);
        }

        if (_timerStarted)
            return;

        _timerStarted = true;
        _timeLeft = 60;
        UpdateRandomButtonText();
        Timer.SpawnRepeating(TimeSpan.FromSeconds(1),
            () =>
            {
                if (Disposed)
                    return;
                _timeLeft--;
                if (_timeLeft <= 0)
                {
                    Send(true);
                    Close();
                    return;
                }

                UpdateRandomButtonText();
            },
            _timerCancel.Token
        );
    }

    private void SelectCharacter(OptionButton.ItemSelectedEventArgs args)
    {
        CharacterSelector.SelectId(args.Id);
        UpdateFields(args.Id);
    }

    private void UpdateFields(int id)
    {
        var info = _characters[id];

        if (!CustomNameCheck.Pressed && _canChangeNameAndDescription)
            CustomNameInput.Text = info.Name;

        if (!CustomDescriptionCheck.Pressed && _canChangeNameAndDescription)
            CustomDescriptionInput.TextRope = new Rope.Leaf(info.Description);
    }

    private void Send(bool random)
    {
        var descText = Rope.Collapse(CustomDescriptionInput.TextRope);
        OnConfirm?.Invoke(random,
            _characters[CharacterSelector.SelectedId].Index,
            CustomNameInput.Text,
            CustomDescriptionCheck.Pressed,
            descText);
    }

    private void UpdateRandomButtonText()
    {
        UseRandomCharacter.Text = Loc.GetString("customizable-humanoid-spawner-button-random", ("timer", _timeLeft));
    }

    private void RunOnClose()
    {
        _timerCancel.Cancel();
        if (_completed)
            return;

        Send(true);
        _completed = true;
    }
}
