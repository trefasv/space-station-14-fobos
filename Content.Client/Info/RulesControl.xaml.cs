using Content.Client.Guidebook;
using Content.Client.Guidebook.RichText;
using Content.Client.UserInterface.Systems.Info;
using Content.Shared.Guidebook;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Shared.CCVar;
using Robust.Shared.Configuration;
using Robust.Client.UserInterface;

namespace Content.Client.Info;

[GenerateTypedNameReferences]
public sealed partial class RulesControl : BoxContainer, ILinkClickHandler
{
    [Dependency] private readonly DocumentParsingManager _parsingMan = default!;
    [Dependency] private readonly IUriOpener _uri = default!;  // DS14
    [Dependency] private readonly IConfigurationManager _cfg = default!; // DS14

    private string? _currentEntry;
    private readonly Stack<string> _priorEntries = new();

    public RulesControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SetGuide();

        HomeButton.OnPressed += _ => SetGuide();

        BackButton.OnPressed += _ => SetGuide(_priorEntries.Pop(), false);
        // DS14-start
        WikiButton.OnPressed += _ =>
        {
            _uri.OpenUri(_cfg.GetCVar(CCVars.InfoLinksWiki));
        };
        WikiButton.Visible = !string.IsNullOrEmpty(_cfg.GetCVar(CCVars.InfoLinksWiki));
        // DS14-end
    }

    public void HandleClick(string link)
    {
        SetGuide(link);
    }

    private void SetGuide(ProtoId<GuideEntryPrototype>? entry = null, bool addToPrior = true)
    {
        var coreEntry = UserInterfaceManager.GetUIController<InfoUIController>().GetCoreRuleEntry();
        entry ??= coreEntry;

        Scroll.SetScrollValue(default);
        RulesContainer.Children.Clear();
        if (!_parsingMan.TryAddMarkup(RulesContainer, entry.Value))
            return;

        if (addToPrior && _currentEntry != null)
            _priorEntries.Push(_currentEntry);
        _currentEntry = entry.Value;

        HomeButton.Visible = entry.Value != coreEntry.Id;
        BackButton.Visible = _priorEntries.Count != 0 && _priorEntries.Peek() != entry.Value;
    }
}
